//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleAppItem.NSItem {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Item", Namespace="http://schemas.datacontract.org/2004/07/ItemDll")]
    [System.SerializableAttribute()]
    public partial class Item : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarqueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PrixField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Marque {
            get {
                return this.MarqueField;
            }
            set {
                if ((object.ReferenceEquals(this.MarqueField, value) != true)) {
                    this.MarqueField = value;
                    this.RaisePropertyChanged("Marque");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Prix {
            get {
                return this.PrixField;
            }
            set {
                if ((this.PrixField.Equals(value) != true)) {
                    this.PrixField = value;
                    this.RaisePropertyChanged("Prix");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NSItem.IServiceItem")]
    public interface IServiceItem {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceItem/GetItemByParameter", ReplyAction="http://tempuri.org/IServiceItem/GetItemByParameterResponse")]
        ConsoleAppItem.NSItem.Item GetItemByParameter(string Marque, int Prix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceItem/GetItemByParameter", ReplyAction="http://tempuri.org/IServiceItem/GetItemByParameterResponse")]
        System.Threading.Tasks.Task<ConsoleAppItem.NSItem.Item> GetItemByParameterAsync(string Marque, int Prix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceItem/UpdateItem", ReplyAction="http://tempuri.org/IServiceItem/UpdateItemResponse")]
        ConsoleAppItem.NSItem.Item UpdateItem(ConsoleAppItem.NSItem.Item i);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceItem/UpdateItem", ReplyAction="http://tempuri.org/IServiceItem/UpdateItemResponse")]
        System.Threading.Tasks.Task<ConsoleAppItem.NSItem.Item> UpdateItemAsync(ConsoleAppItem.NSItem.Item i);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceItem/Insert", ReplyAction="http://tempuri.org/IServiceItem/InsertResponse")]
        void Insert(string Marque, double Prix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceItem/Insert", ReplyAction="http://tempuri.org/IServiceItem/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(string Marque, double Prix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceItem/GetListItem", ReplyAction="http://tempuri.org/IServiceItem/GetListItemResponse")]
        ConsoleAppItem.NSItem.Item[] GetListItem();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceItem/GetListItem", ReplyAction="http://tempuri.org/IServiceItem/GetListItemResponse")]
        System.Threading.Tasks.Task<ConsoleAppItem.NSItem.Item[]> GetListItemAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceItem/SelectAll", ReplyAction="http://tempuri.org/IServiceItem/SelectAllResponse")]
        ConsoleAppItem.NSItem.Item[] SelectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceItem/SelectAll", ReplyAction="http://tempuri.org/IServiceItem/SelectAllResponse")]
        System.Threading.Tasks.Task<ConsoleAppItem.NSItem.Item[]> SelectAllAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceItemChannel : ConsoleAppItem.NSItem.IServiceItem, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceItemClient : System.ServiceModel.ClientBase<ConsoleAppItem.NSItem.IServiceItem>, ConsoleAppItem.NSItem.IServiceItem {
        
        public ServiceItemClient() {
        }
        
        public ServiceItemClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceItemClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceItemClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceItemClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConsoleAppItem.NSItem.Item GetItemByParameter(string Marque, int Prix) {
            return base.Channel.GetItemByParameter(Marque, Prix);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppItem.NSItem.Item> GetItemByParameterAsync(string Marque, int Prix) {
            return base.Channel.GetItemByParameterAsync(Marque, Prix);
        }
        
        public ConsoleAppItem.NSItem.Item UpdateItem(ConsoleAppItem.NSItem.Item i) {
            return base.Channel.UpdateItem(i);
        }
        
        public System.Threading.Tasks.Task<ConsoleAppItem.NSItem.Item> UpdateItemAsync(ConsoleAppItem.NSItem.Item i) {
            return base.Channel.UpdateItemAsync(i);
        }
        
        public void Insert(string Marque, double Prix) {
            base.Channel.Insert(Marque, Prix);
        }
        
        public System.Threading.Tasks.Task InsertAsync(string Marque, double Prix) {
            return base.Channel.InsertAsync(Marque, Prix);
        }
        
        public ConsoleAppItem.NSItem.Item[] GetListItem() {
            return base.Channel.GetListItem();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppItem.NSItem.Item[]> GetListItemAsync() {
            return base.Channel.GetListItemAsync();
        }
        
        public ConsoleAppItem.NSItem.Item[] SelectAll() {
            return base.Channel.SelectAll();
        }
        
        public System.Threading.Tasks.Task<ConsoleAppItem.NSItem.Item[]> SelectAllAsync() {
            return base.Channel.SelectAllAsync();
        }
    }
}
